AWSTemplateFormatVersion: 2010-09-09
Description: MultiAZ VPC Environment with Application Loadbalancer for ECS Tasks
Parameters:
  PublicSubnetCIDR1:
    Description: CIDR Block for the Public Subnet 1
    Type: String
    Default: 10.1.0.0/24
    AllowedPattern: '[a-zA-Z0-9]+\..+'
  PublicSubnetCIDR2:
    Description: CIDR Block for the Public Subnet 2
    Type: String
    Default: 10.1.1.0/24
    AllowedPattern: '[a-zA-Z0-9]+\..+'
  PrivateSubnetCIDR1:
    Description: CIDR Block for the Private Subnet 1
    Type: String
    Default: 10.1.2.0/23
    AllowedPattern: '[a-zA-Z0-9]+\..+'
  PrivateSubnetCIDR2:
    Description: CIDR Block for the Private Subnet 2
    Type: String
    Default: 10.1.4.0/23
    AllowedPattern: '[a-zA-Z0-9]+\..+'
  VPCCIDR:
    Description: CIDR Block for the VPC
    Type: String
    Default: 10.1.0.0/16
    AllowedPattern: '[a-zA-Z0-9]+\..+'
Resources:
  CodeBuildDemoServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser'
  TaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess'
  TaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  CodeDeployRoleForECS:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - VPC
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR1
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - PublicSubnet01
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
        - Key: Role
          Value: Public Subnet
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR2
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - PublicSubnet02
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
        - Key: Role
          Value: Public Subnet
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR1
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - PrivateSubnet02
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
        - Key: Role
          Value: Public Subnet
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR2
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - PrivateSubnet02
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
        - Key: Role
          Value: Public Subnet
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - IG
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public
  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public Subnet
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackName'
        - Key: Network
          Value: Public Subnet
  PrivateSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetRouteTableAssociation2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access on port 80
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - ELBSG
  ECSTaskSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access on port 8080
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - ESCTaskSG
  ApplicationLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Join 
            - '-'
            - - !Ref 'AWS::StackName'
              - ELB
  ALBListener1:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: ALBTargetGroup1
      LoadBalancerArn:
          Ref: ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  ALBListener2:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: ALBTargetGroup2
      LoadBalancerArn:
          Ref: ApplicationLoadBalancer
      Port: 8080
      Protocol: HTTP
  ALBTargetGroup1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 10
      HealthCheckPath: /
      Name: PipelineDemoTarget1
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Ref: VPC
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
  ALBTargetGroup2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 10
      HealthCheckPath: /
      Name: PipelineDemoTarget2
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Ref: VPC
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60


Outputs:
  VPC:
    Value: !Ref VPC
    Description: VPC ID
  PublicSubnetId1:
    Value: !Ref PublicSubnet1
    Description: Subnet ID for the public subnet1
  PublicSubnetId2:
    Value: !Ref PublicSubnet2
    Description: Subnet ID for the public subnet2
  PrivateSubnetId1:
    Value: !Ref PrivateSubnet1
    Description: Subnet ID for the private subnet1
  PrivateSubnetId2:
    Value: !Ref PrivateSubnet2
    Description: Subnet ID for the private subnet2
  AZ1:
    Value: !GetAtt
      - PublicSubnet1
      - AvailabilityZone
    Description: AZ1
  AZ2:
    Value: !GetAtt
      - PublicSubnet2
      - AvailabilityZone
    Description: AZ2
  ALBTargetGroup1:
    Value: !Ref ALBTargetGroup1
    Description: ALBTargetGroup1
  ALBTargetGroup2:
    Value: !Ref ALBTargetGroup2
    Description: ALBTargetGroup2
  ECSTaskSecurityGroup:
    Value: !Ref ECSTaskSecurityGroup
    Description: ECSTaskSecurityGroup
  ELBEndpoint:
    Value: !GetAtt 
      - ApplicationLoadBalancer
      - DNSName
    Description: ELBEndopoint
  TaskRole:
    Value: !Ref TaskRole
    Description: TaskRole
  TaskExecutionRole:
    Value: !Ref TaskExecutionRole
    Description: TaskExecutionRole

